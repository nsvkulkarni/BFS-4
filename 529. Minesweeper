//TC:- O(m*n)
//SC:- O(min(m,n))

class Solution {
    public char[][] updateBoard(char[][] board, int[] click) {
        
       if(board[click[0]][click[1]] == 'M')
       {
           board[click[0]][click[1]] = 'X';
           return board;
       }
        
        Queue<Integer> row = new LinkedList<>();
        Queue<Integer> column = new LinkedList<>();
        
        row.add(click[0]);
        column.add(click[1]);
        
        board[click[0]][click[1]] = 'B';
        
        int[][] dirs = {{0,1}, {0, -1}, {1,0}, {-1,0}, {1,1}, {-1, -1}, {1, -1}, {-1, 1}};
        
        while(!row.isEmpty())
        {
            int currRow = row.poll();
            int currColumn = column.poll();
            int mines = getMines(currRow, currColumn, board, dirs);
            
            if(mines != 0)
            {
                board[currRow][currColumn] = (char)(mines + '0');
            }
            
            else
            {
                for(int[] dir : dirs)
                {
                    int newRow = currRow + dir[0];
                    int newColumn = currColumn + dir[1];
                    
                    if(newRow >= 0 && newColumn >= 0 && newColumn < board[0].length && newRow < board.length && board[newRow][newColumn] == 'E')
                    {
                        board[newRow][newColumn] = 'B';
                        row.add(newRow);
                        column.add(newColumn);
                        
                        
                    }
                }
            }      
        }
        
        return board;
    }
        
        private int getMines(int currRow, int currColumn, char[][] board, int[][] dirs)
        {
            int mines = 0;
            
            for(int[] dir : dirs)
            {
                int newRow = currRow + dir[0];
                int newColumn = currColumn + dir[1];
                
                if(newRow >= 0 && newColumn >= 0 && newColumn < board[0].length && newRow < board.length && board[newRow][newColumn] == 'M')
                {
                    mines++;
                }
                
            }
            
            return mines;
        }
        
    }
